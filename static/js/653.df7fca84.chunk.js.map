{"version":3,"file":"static/js/653.df7fca84.chunk.js","mappings":"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","sources":["components/pages/SinglePage.js","utils/setContent.js","components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { useMarvelService } from \"../../services/MarvelService\";\r\n\r\nimport setContent from '../../utils/setContent';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n    const { id } = useParams()\r\n    const [data, setData] = useState(null)\r\n\r\n    const { processing, setProcessing, getComic, getCharacter } = useMarvelService()\r\n\r\n    useEffect(() => updateData(), // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [id])\r\n\r\n    const updateData = () => {\r\n        if (!id) return\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id)\r\n                    .then(onDataLoaded)\r\n                break\r\n            case 'character':\r\n                getCharacter(id)\r\n                    .then(onDataLoaded)\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data)\r\n\r\n        setProcessing(data ? 'confirmed' : 'error')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {setContent(processing, Component, data)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;","import Spinner from \"../components/spinner/Spinner\"\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (processing, Component, data) => {\r\n\r\n    switch (processing.replace(/\\d/g, '')) {\r\n        case 'waiting':\r\n            return <Spinner />\r\n        case 'loading':\r\n            return <Spinner />\r\n        case 'confirmed':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent","import styled from 'styled-components';\r\nimport imgError from \"./error.gif\"\r\n\r\nconst ErrorImg = styled.img`\r\n  display: block;\r\n  width: 250px;\r\n  height: 250px;\r\n  object-fit: contain;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <ErrorImg src={imgError} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [processing, setProcessing] = useState('waiting')\r\n\r\n    const request = useCallback(\r\n        async (url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = {\r\n                'Content-Type': 'application/json',\r\n                'Accept-Language': 'en-US, en;q=0.9'\r\n            }) => {\r\n\r\n            setProcessing('loading')\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers })\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n\r\n                //setProcessing('confirmed') -  устанавливаем \"вручную\" после обработки data в цепочке обработки then\r\n\r\n                return data\r\n\r\n            } catch (e) {\r\n                const codeError = e.message.includes('status:') ? e.message.match(/(?<=status:\\s*)\\d{3}/g)[0] : '000'\r\n\r\n                setProcessing('error' + codeError)\r\n\r\n                throw new Error(e);\r\n            }\r\n        }, [])\r\n\r\n    return { request, processing, setProcessing }\r\n}\r\n","import { useHttp } from '../hooks/http.hook'\r\n\r\nimport imgNotFound from \"../resources/img/image_not_found.webp\"\r\nimport imgNotAvailbale from \"../resources/img/image_not_available.webp\"\r\n\r\nexport const useMarvelService = () => {\r\n    const { request, processing, setProcessing } = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = `apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n\r\n    const charsMarvel = 1564 // на 16.02.2025\r\n    const offsetCharsBeginMarvel = 196\r\n    const comicsMarvel = 1000 // ???\r\n\r\n    const getAllCharacters = async (offset = offsetCharsBeginMarvel, limit = 9) => {\r\n        if (offset > charsMarvel - 1) return []\r\n\r\n        try {\r\n            const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`)\r\n            return res.data.results.map(_transformCharacter)\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        try {\r\n            const res = await request(`${_apiBase}characters/${id}?${_apiKey} `)\r\n            return res ? _transformCharacter(res.data.results[0]) : null\r\n        } catch (e) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        try {\r\n            const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n            return res.data.results.map(_transformCharacter);\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = 0, limit = 8) => {\r\n        try {\r\n            const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`)\r\n            return res.data.results.map(_transformComics)\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        try {\r\n            const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n            return res ? _transformComics(res.data.results[0]) : []\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        const { id, name, description, thumbnail, urls } = char\r\n\r\n        const srcThumbnail = thumbnail.path.includes('image_not_available') ? imgNotFound\r\n            : thumbnail.path.includes('4c002e0305708') ? imgNotAvailbale\r\n                : `${thumbnail.path}.${thumbnail.extension}`\r\n\r\n        return {\r\n            id,\r\n            name,\r\n            description: description,\r\n            thumbnail: srcThumbnail,\r\n            homepage: urls[0].url,\r\n            wiki: urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        const { id, title, description, pageCount, thumbnail, prices } = comics\r\n\r\n        return {\r\n            id,\r\n            title,\r\n            description: description || \"The description is missing\",\r\n            pageCount: pageCount\r\n                ? `${pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: `${thumbnail.path}.${thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: prices[0].price\r\n                ? `${prices[0].price} $`\r\n                : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        charsMarvel, comicsMarvel, offsetCharsBeginMarvel,\r\n        processing, setProcessing,\r\n        getCharacter, getCharacterByName, getAllCharacters,\r\n        getAllComics, getComic\r\n    }\r\n}\r\n"],"names":["_ref","Component","dataType","id","useParams","data","setData","useState","processing","setProcessing","getComic","getCharacter","useMarvelService","useEffect","updateData","then","onDataLoaded","_jsxs","_Fragment","children","_jsx","AppBanner","setContent","replace","Spinner","ErrorMessage","Error","ErrorImg","styled","img","src","imgError","alt","className","avengers","avengersLogo","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","status","json","e","codeError","message","includes","match","_apiBase","_apiKey","_transformCharacter","char","name","description","thumbnail","urls","path","imgNotFound","imgNotAvailbale","extension","homepage","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","prices","language","textObjects","price","charsMarvel","comicsMarvel","offsetCharsBeginMarvel","res","results","getCharacterByName","map","getAllCharacters","offset","limit","getAllComics"],"sourceRoot":""}