{"version":3,"file":"static/js/768.1603723b.chunk.js","mappings":"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","sources":["utils/setContent.js","services/MarvelBuffering.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import Spinner from \"../components/spinner/Spinner\"\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (processing, Component, data) => {\r\n\r\n    switch (processing.replace(/\\d/g, '')) {\r\n        case 'waiting':\r\n            return <Spinner />\r\n        case 'loading':\r\n            return <Spinner />\r\n        case 'confirmed':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent","import { useState, useRef } from \"react\"\r\n\r\nimport { useMarvelService } from \"./MarvelService\";\r\n\r\nexport const useMarvelBuffering = ({\r\n    qtyMin = 3,\r\n    qtyLimit = 10,\r\n    callbackOffset = () => 0\r\n}) => {\r\n    const { getAllCharacters, charsMarvel, offsetCharsBeginMarvel } = useMarvelService()\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [processing, setProcessing] = useState('waiting')\r\n\r\n    const _chars = useRef([])\r\n    const _qtyExpected = useRef(0)\r\n    const _qtyMin = Math.max(1, qtyMin)\r\n    const _qtyLimit = Math.min(100, Math.max(1, qtyLimit))\r\n\r\n    const setBuffer = (chars) => {\r\n        _chars.current = chars.length ? _chars.current.concat(chars) : [null]\r\n        _qtyExpected.current -= _qtyLimit\r\n\r\n        setLoading(false)\r\n    }\r\n\r\n    const getBuffer = () => {\r\n        const bufferLength = _chars.current.length\r\n        const char = bufferLength ? _chars.current[bufferLength - 1] : null\r\n\r\n        if (char) {\r\n            _chars.current = _chars.current.slice(0, bufferLength - 1)\r\n            setProcessing('confirmed')\r\n        } else setProcessing(bufferLength ? 'error' : 'waiting')\r\n\r\n        if ((bufferLength + _qtyExpected.current) < _qtyMin) {\r\n            setLoading(bufferLength < 1)\r\n            updateBuffer()\r\n        }\r\n\r\n        return char\r\n    }\r\n\r\n    const updateBuffer = () => {\r\n        const offset = callbackOffset()\r\n\r\n        _qtyExpected.current += _qtyLimit\r\n\r\n        getAllCharacters(offset, _qtyLimit)\r\n            .then((chars) => setBuffer(chars))\r\n            .catch((e) => setBuffer([]))\r\n    }\r\n\r\n    return { processing, loading, getBuffer, charsMarvel, offsetCharsBeginMarvel }\r\n}\r\n","import { useState, useEffect, memo } from 'react';\n\nimport setContent from '../../utils/setContent';\nimport { useMarvelBuffering } from \"../../services/MarvelBuffering\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = memo(() => {\n    const [char, setChar] = useState(null)\n    const [selected, setSelected] = useState(true)\n\n    const { processing, loading, getBuffer, charsMarvel, offsetCharsBeginMarvel } = useMarvelBuffering({\n        qtyMin: 3,\n        qtyLimit: 10,\n        callbackOffset: () => Math.floor(Math.random() * (charsMarvel - 10 - offsetCharsBeginMarvel) + offsetCharsBeginMarvel)\n    })\n\n    useEffect(() => {\n        onCharRender()\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [loading, selected])\n\n    useEffect(() => {\n        const timerId = setInterval(() => onCharRender(), 5000)\n        return () => clearInterval(timerId)\n    })\n\n    const onCharRender = () => {\n        if (selected && char) return\n\n        setChar(getBuffer())\n    }\n\n    const onCharSelected = () => {\n        setSelected(selected => !selected)\n    }\n\n    const btnText = selected ? 'Show others' : 'I choose'\n    const btnClass = `button ${(processing === 'waiting' || processing === 'error') ? 'button__secondary' : 'button__main'}`\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(processing, View, { char, selected })}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className={btnClass} onClick={onCharSelected}>\n                    <div className=\"inner\" >{btnText}</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n})\n\nconst sliceText = (text, maxLen) => {\n    let str = text.trim().replace(/\\s+/g, \" \") || 'no information available'\n\n    if (str.length > maxLen) str = str.slice(0, maxLen - 3).match(/.+(?=\\s)/g) + \"...\"\n    return str\n}\n\nconst View = ({ data }) => {\n    const { char, selected } = data\n    const { id, name, description, thumbnail, homepage, wiki } = char\n    const btnClass = `button ${selected ? 'button__main' : 'button__secondary'}`\n    const descriptionShort = sliceText(description, 210)\n\n    return (\n        <div className=\"randomchar__block\" key={id}>\n            <img src={thumbnail} alt={name} className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{descriptionShort}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className={btnClass}>\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className={btnClass}>\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default RandomChar;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport { useMarvelService } from \"../../services/MarvelService\";\nimport setContent from '../../utils/setContent';\n\nimport './charList.scss';\n\n\nconst CharList = ({ charId, onCharSelected, setRefApp, onFocusTo }) => {\n    const { processing, setProcessing, getAllCharacters, charsMarvel, offsetCharsBeginMarvel } = useMarvelService()\n\n    const [chars, setChars] = useState([])\n    const [offset, setOffset] = useState(offsetCharsBeginMarvel)\n\n    useEffect(() => {\n        onRequest()\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [])\n\n    const onRequest = () => {\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = newChars => {\n        setChars(chars => [...chars,\n        ...newChars.filter(obj1 => chars.findIndex(obj2 => (obj2.id === obj1.id)) < 0)])\n        setOffset(offset + 9)\n\n        setProcessing('confirmed')\n    }\n\n    const viewList = (chars) => {\n        const cardsChars = chars.map(char => {\n            const { id, name, thumbnail } = char\n            const idSelected = id === charId\n            const classLi = `char__item ${idSelected ? 'char__item_selected' : ''}`\n\n            return (\n                <CSSTransition key={id} timeout={300} classNames=\"char__item\">\n                    <li\n                        className={classLi}\n                        key={id}\n                    >\n                        <button\n                            ref={link => idSelected ? setRefApp('CharList', link) : null}\n                            onClick={() => onCharSelected(id)}\n                            onKeyDown={e => (e.code === 'ArrowRight' && idSelected) ? onFocusTo('CharInfo') : null}\n                        >\n                            <img src={thumbnail} alt={name} />\n                            <div className=\"char__name\">{name}</div>\n                        </button>\n                    </li>\n                </CSSTransition>\n            )\n        })\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {cardsChars}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const setContentCust = (processing) => {\n        switch (processing) {\n            case 'confirmed':\n                return null\n            case 'error429':\n                return (<span className=\"char__error_message\">You have exceeded your rate limit.  Please try again later.</span>)\n            default:\n                return setContent(processing)\n        }\n    }\n\n    const classButton = `button ${processing === 'loading' ? 'button__secondary' : 'button__main'} button__long`\n    const styleButton = processing === 'loading' ? { width: 'unset' } : {}\n\n    return (\n        <div className=\"char__list\">\n            {viewList(chars)}\n            {setContentCust(processing)}\n            {(processing === 'error429' || processing === 'loading' || offset > charsMarvel - 1) ? null : (\n                <button\n                    className={classButton}\n                    onClick={onRequest}\n                    style={styleButton}\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            )}\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n    setRefApp: PropTypes.func.isRequired,\n    onFocusTo: PropTypes.func.isRequired,\n    charId: PropTypes.number.isRequired,\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\"\nimport PropTypes from 'prop-types';\nimport Skeleton from '../skeleton/Skeleton';\nimport setContent from '../../utils/setContent';\n\nimport { useMarvelService } from \"../../services/MarvelService\";\n\nimport './charInfo.scss';\n\nconst CharInfo = ({ charId, setRefApp, onFocusTo, comicsMax = 10 }) => {\n    const [char, setChar] = useState(0)\n\n    const { processing, setProcessing, getCharacter } = useMarvelService()\n\n    useEffect(() => updateChar(), // eslint-disable-next-line react-hooks/exhaustive-deps\n        [charId])\n\n    const updateChar = () => {\n        if (!charId) return\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n\n        setProcessing(char ? 'confirmed' : 'error')\n    }\n\n    const setContentCust = (processing) => {\n\n        switch (processing) {\n            case 'waiting':\n                return <Skeleton />\n            default:\n                return setContent(processing, View, { char, comicsMax, setRefApp, onFocusTo })\n        }\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContentCust(processing)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { char, comicsMax, setRefApp, onFocusTo } = data\n    const { id, name, description, thumbnail, homepage, wiki, comics } = char\n    const qtyComics = Math.min(comics.length, comicsMax)\n    comics.length = qtyComics\n\n    return (\n        <>\n            <div className=\"char__basics\" key={id}>\n                <img src={thumbnail} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage}\n                            ref={link => setRefApp('CharInfo', link)}\n                            className=\"button button__main\"\n                            onKeyDown={e => (e.code === 'ArrowLeft') ? onFocusTo('CharList') : null}\n                        >\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki}\n                            className=\"button button__main\"\n                            onKeyDown={e => (e.code === 'ArrowLeft') ? onFocusTo('CharList') : null}\n                        >\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {qtyComics > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        const id = item.resourceURI.match(/\\d+$/)[0]\n\n                        return (\n                            <li className=\"char__comics-item\" key={i}\n                                onKeyDown={e => (e.code === 'ArrowLeft') ? onFocusTo('CharList') : null}\n                            >\n                                <Link to={`/reactGLO2025_Marvel/comics/${id}`}>\n                                    {item.name}\n                                </Link>\n                            </li>\n\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number.isRequired,\n    setRefApp: PropTypes.func.isRequired,\n    onFocusTo: PropTypes.func.isRequired,\n    comicsMax: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport { useMarvelService } from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { processing, setProcessing, getCharacterByName } = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n\n        setProcessing(char.length > 0 ? 'confirmed' : 'notfound')\n    }\n\n    const updateChar = (name) => {\n        getCharacterByName(name)\n            .then(onCharLoaded)\n    }\n\n    const setContentCust = (processing) => {\n\n        switch (processing) {\n            case 'waiting':\n                return null\n            case 'notfound':\n                return (\n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>\n                )\n            case 'confirmed':\n                return (\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/reactGLO2025_Marvel/characters/${char[0].id}`} className=\"button button__main\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div>\n                )\n            default:\n                return setContent(processing)\n        }\n    }\n\n    const btnClass = `button ${(processing === 'confirmed'\n        || processing === 'loading' || processing.includes('error')) ? 'button__secondary' : 'button__main'}`\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: ''\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit={({ charName }) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name='charName'\n                            type='text'\n                            placeholder=\"Enter name\"\n                            onInput={e => setProcessing('waiting')}\n                        />\n                        <button\n                            type='submit'\n                            className={btnClass}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {setContentCust(processing)}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Обновите состояние, чтобы при следующем рендеринге был показан резервный пользовательский интерфейс.\r\n        return { error: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // формируйте логи об ошибках здесь\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            if (this.props.fallback) return this.props.fallback\r\n            else return <ErrorMessage />\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import { useState, useRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(0)\r\n\r\n    const refs = useRef({})\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n\r\n    const setRefApp = (nameRef, elem) => {\r\n        refs[nameRef] = elem\r\n    }\r\n\r\n    const onFocusTo = (nameRef) => {\r\n        if (refs[nameRef]) refs[nameRef].focus()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList\r\n                        setRefApp={setRefApp} onFocusTo={onFocusTo}\r\n                        onCharSelected={onCharSelected}\r\n                        charId={selectedChar}\r\n                    />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo\r\n                            setRefApp={setRefApp} onFocusTo={onFocusTo}\r\n                            charId={selectedChar}\r\n                        />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import styled from 'styled-components';\r\nimport imgError from \"./error.gif\"\r\n\r\nconst ErrorImg = styled.img`\r\n  display: block;\r\n  width: 250px;\r\n  height: 250px;\r\n  object-fit: contain;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <ErrorImg src={imgError} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [processing, setProcessing] = useState('waiting')\r\n\r\n    const request = useCallback(\r\n        async (url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = {\r\n                'Content-Type': 'application/json',\r\n                'Accept-Language': 'en-US, en;q=0.9'\r\n            }) => {\r\n\r\n            setProcessing('loading')\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers })\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n\r\n                //setProcessing('confirmed') -  устанавливаем \"вручную\" после обработки data в цепочке обработки then\r\n\r\n                return data\r\n\r\n            } catch (e) {\r\n                const codeError = e.message.includes('status:') ? e.message.match(/(?<=status:\\s*)\\d{3}/g)[0] : '000'\r\n\r\n                setProcessing('error' + codeError)\r\n\r\n                throw new Error(e);\r\n            }\r\n        }, [])\r\n\r\n    return { request, processing, setProcessing }\r\n}\r\n","import { useHttp } from '../hooks/http.hook'\r\n\r\nimport imgNotFound from \"../resources/img/image_not_found.webp\"\r\nimport imgNotAvailbale from \"../resources/img/image_not_available.webp\"\r\n\r\nexport const useMarvelService = () => {\r\n    const { request, processing, setProcessing } = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = `apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n\r\n    const charsMarvel = 1564 // на 16.02.2025\r\n    const offsetCharsBeginMarvel = 196\r\n    const comicsMarvel = 1000 // ???\r\n\r\n    const getAllCharacters = async (offset = offsetCharsBeginMarvel, limit = 9) => {\r\n        if (offset > charsMarvel - 1) return []\r\n\r\n        try {\r\n            const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`)\r\n            return res.data.results.map(_transformCharacter)\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        try {\r\n            const res = await request(`${_apiBase}characters/${id}?${_apiKey} `)\r\n            return res ? _transformCharacter(res.data.results[0]) : null\r\n        } catch (e) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        try {\r\n            const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n            return res.data.results.map(_transformCharacter);\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = 0, limit = 8) => {\r\n        try {\r\n            const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`)\r\n            return res.data.results.map(_transformComics)\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        try {\r\n            const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n            return res ? _transformComics(res.data.results[0]) : []\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        const { id, name, description, thumbnail, urls } = char\r\n\r\n        const srcThumbnail = thumbnail.path.includes('image_not_available') ? imgNotFound\r\n            : thumbnail.path.includes('4c002e0305708') ? imgNotAvailbale\r\n                : `${thumbnail.path}.${thumbnail.extension}`\r\n\r\n        return {\r\n            id,\r\n            name,\r\n            description: description,\r\n            thumbnail: srcThumbnail,\r\n            homepage: urls[0].url,\r\n            wiki: urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        const { id, title, description, pageCount, thumbnail, prices } = comics\r\n\r\n        return {\r\n            id,\r\n            title,\r\n            description: description || \"The description is missing\",\r\n            pageCount: pageCount\r\n                ? `${pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: `${thumbnail.path}.${thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: prices[0].price\r\n                ? `${prices[0].price} $`\r\n                : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        charsMarvel, comicsMarvel, offsetCharsBeginMarvel,\r\n        processing, setProcessing,\r\n        getCharacter, getCharacterByName, getAllCharacters,\r\n        getAllComics, getComic\r\n    }\r\n}\r\n"],"names":["setContent","processing","Component","data","replace","_jsx","Spinner","ErrorMessage","Error","RandomChar","memo","char","setChar","useState","selected","setSelected","loading","getBuffer","charsMarvel","offsetCharsBeginMarvel","_ref","qtyMin","qtyLimit","callbackOffset","getAllCharacters","useMarvelService","setLoading","setProcessing","_chars","useRef","_qtyExpected","_qtyMin","Math","max","_qtyLimit","min","setBuffer","chars","current","length","concat","updateBuffer","offset","then","catch","e","bufferLength","slice","useMarvelBuffering","floor","random","useEffect","onCharRender","timerId","setInterval","clearInterval","btnText","btnClass","_jsxs","className","children","View","onClick","onCharSelected","src","mjolnir","alt","id","name","description","thumbnail","homepage","wiki","descriptionShort","sliceText","text","maxLen","str","trim","match","href","charId","setRefApp","onFocusTo","setChars","setOffset","onRequest","onCharListLoaded","newChars","filter","obj1","findIndex","obj2","classButton","styleButton","width","cardsChars","map","idSelected","classLi","CSSTransition","timeout","classNames","ref","link","onKeyDown","code","TransitionGroup","component","viewList","setContentCust","style","Skeleton","_Fragment","_ref2","comicsMax","comics","qtyComics","item","i","resourceURI","Link","to","getCharacter","updateChar","onCharLoaded","CharSearchForm","getCharacterByName","includes","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","onInput","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","getDerivedStateFromError","componentDidCatch","errorInfo","render","this","props","fallback","MainPage","selectedChar","setSelectedChar","refs","nameRef","elem","focus","Helmet","content","CharList","CharInfo","decoration","ErrorImg","styled","img","imgError","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","codeError","message","_apiBase","_apiKey","_transformCharacter","urls","path","imgNotFound","imgNotAvailbale","extension","items","_transformComics","_comics$textObjects$","title","pageCount","prices","language","textObjects","price","comicsMarvel","res","results","limit","getAllComics","getComic"],"sourceRoot":""}