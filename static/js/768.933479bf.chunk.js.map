{"version":3,"file":"static/js/768.933479bf.chunk.js","mappings":"gJAGA,MAgBA,EAhBmBA,CAACC,EAAYC,EAAWC,KAEvC,OAAQF,EAAWG,QAAQ,MAAO,KAC9B,IAAK,UAEL,IAAK,UACD,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IACnB,IAAK,YACD,OAAOD,EAAAA,EAAAA,KAACH,EAAS,CAACC,KAAMA,IAC5B,IAAK,QACD,OAAOE,EAAAA,EAAAA,KAACE,EAAAA,EAAY,IACxB,QACI,MAAM,IAAIC,MAAM,4BACxB,C,sKCNJ,MAAMC,GAAaC,EAAAA,EAAAA,OAAK,KACpB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAUC,IAAeF,EAAAA,EAAAA,WAAS,IAEnC,oBAAEG,IAAwBC,EAAAA,EAAAA,MAE1B,WAAEhB,EAAU,UAAEiB,EAAS,aAAEC,GCdPC,KAGT,IAHU,OACzBC,EAAS,EAAC,SACVC,EAAW,GAAE,QACbC,GAASH,EAET,MAAOnB,EAAYuB,IAAiBX,EAAAA,EAAAA,UAAS,WAEvCY,GAAOC,EAAAA,EAAAA,QAAO,IACdC,GAAcD,EAAAA,EAAAA,QAAO,GAE3BL,EAASO,KAAKC,IAAI,EAAGR,GACrBC,EAAWM,KAAKE,IAAI,IAAKF,KAAKC,IAAI,EAAGP,IAErC,MAAMS,EAAaC,IACfP,EAAKQ,QAAUD,EAASE,OAAST,EAAKQ,QAAQE,OAAOH,GAAY,CAAC,MAClEL,EAAYM,SAAWX,CAAQ,EAiCnC,MAAO,CAAErB,aAAYiB,UA9BHA,KACd,MAAMkB,EAAeX,EAAKQ,QAAQC,OAC5BvB,EAAOyB,EAAeX,EAAKQ,QAAQG,EAAe,GAAK,KAS7D,OANIZ,EADAb,EACc,YAEAyB,EAAe,QAAU,WAEvCA,IAAcX,EAAKQ,QAAUR,EAAKQ,QAAQI,MAAM,EAAGD,EAAe,IAE/DzB,CAAI,EAmBiBQ,aAhBXA,KACZI,EAKAE,EAAKQ,QAAQC,OAASP,EAAYM,QAAWZ,IAE9CM,EAAYM,SAAWX,EAEvBC,EAAQD,GACHgB,MAAMnC,GAAS4B,EAAU5B,KACzBoC,OAAOC,GAAMT,EAAU,OAV5BA,EAAU,GAWd,EAG0C,EDlCEU,CAAa,CACzDpB,OAAQ,EACRC,SAAU,GACVC,QAAUmB,GAAU1B,EAAoB0B,MAG5CC,EAAAA,EAAAA,YAAU,KACNxB,GAAc,GAEd,KAEJwB,EAAAA,EAAAA,YAAU,KACD7B,GAAU8B,GAAc,GAE7B,CAAC9B,KAEL6B,EAAAA,EAAAA,YAAU,KACN,MAAME,EAAUC,aAAY,KACnBhC,GAA2B,YAAfb,GAA0B2C,GAAc,GAC1D,KACH,MAAO,IAAMG,cAAcF,EAAQ,IAGvC,MAAMD,EAAeA,KACjBhC,EAAQM,KACRC,GAAc,EAOZ6B,EAAUlC,EAAW,cAAgB,WACrCmC,EAAW,WAA0B,YAAfhD,EAA4B,oBAAsB,gBAE9E,OACIiD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACtBpD,EAAAA,EAAAA,GAAWC,EAAYoD,EAAM,CAAE1C,OAAMG,cAEtCoC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACF/C,EAAAA,EAAAA,KAAA,SAAM,6CAGrCA,EAAAA,EAAAA,KAAA,KAAG8C,UAAU,oBAAmBC,SAAC,2BAGjC/C,EAAAA,EAAAA,KAAA,UAAQ8C,UAAWF,EAAUK,QAnBlBC,KACnBxC,GAAYD,IAAaA,GAAS,EAkB2BsC,UACjD/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAGJ,OAE7B3C,EAAAA,EAAAA,KAAA,OAAKmD,IAAKC,EAASC,IAAI,UAAUP,UAAU,gCAE7C,IAWRE,EAAOjC,IAAe,IAAd,KAAEjB,GAAMiB,EAClB,MAAM,KAAET,EAAI,SAAEG,GAAaX,GACrB,GAAEwD,EAAE,KAAEC,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAASrD,EACvDsC,EAAW,WAAUnC,EAAW,eAAiB,qBACjDmD,EAXQC,EAACC,EAAMC,KACrB,IAAIC,EAAMF,EAAKG,OAAOlE,QAAQ,OAAQ,MAAQ,2BAG9C,OADIiE,EAAInC,OAASkC,IAAQC,EAAMA,EAAIhC,MAAM,EAAG+B,EAAS,GAAGG,MAAM,aAAe,OACtEF,CAAG,EAOeH,CAAUL,EAAa,KAEhD,OACIX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9B/C,EAAAA,EAAAA,KAAA,OAAKmD,IAAKM,EAAWJ,IAAKE,EAAMT,UAAU,qBAC1CD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7B/C,EAAAA,EAAAA,KAAA,KAAG8C,UAAU,mBAAkBC,SAAEQ,KACjCvD,EAAAA,EAAAA,KAAA,KAAG8C,UAAU,oBAAmBC,SAAEa,KAClCf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7B/C,EAAAA,EAAAA,KAAA,KAAGmE,KAAMT,EAAUZ,UAAWF,EAASG,UACnC/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,gBAE3B/C,EAAAA,EAAAA,KAAA,KAAGmE,KAAMR,EAAMb,UAAWF,EAASG,UAC/B/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,mBAVCO,EAclC,EAKd,I,wBE/FA,MA+FA,EA/FiBvC,IAAuD,IAAtD,OAAEqD,EAAM,eAAElB,EAAc,UAAEmB,EAAS,UAAEC,GAAWvD,EAC9D,MAAM,WAAEnB,EAAU,cAAEuB,EAAa,iBAAEoD,EAAgB,YAAEC,EAAW,uBAAEC,IAA2B7D,EAAAA,EAAAA,MAEtF8D,EAAOC,IAAYnE,EAAAA,EAAAA,UAAS,KAC5BoE,EAAQC,IAAarE,EAAAA,EAAAA,UAASiE,IAErCnC,EAAAA,EAAAA,YAAU,KACNwC,GAAW,GAEX,IAEJ,MAAMA,EAAYA,KACdP,EAAiBK,GACZ3C,KAAK8C,EAAiB,EAGzBA,EAAmBC,IACrBL,GAASD,GAAS,IAAIA,KACnBM,EAASC,QAAOC,GAAQR,EAAMS,WAAUC,GAASA,EAAK9B,KAAO4B,EAAK5B,KAAO,OAC5EuB,EAAUD,EAAS,GAEnBzD,EAAc,YAAY,EA+CxBkE,EAAc,UAAyB,YAAfzF,EAA2B,oBAAsB,8BACzE0F,EAA6B,YAAf1F,EAA2B,CAAE2F,MAAO,SAAY,CAAC,EAErE,OACI1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CAhDb2B,KACd,MAAMc,EAAad,EAAMe,KAAInF,IACzB,MAAM,GAAEgD,EAAE,KAAEC,EAAI,UAAEE,GAAcnD,EAC1BoF,EAAapC,IAAOc,EACpBuB,EAAU,eAAcD,EAAa,sBAAwB,IAEnE,OACI1F,EAAAA,EAAAA,KAAC4F,EAAAA,EAAa,CAAUC,QAAS,IAAKC,WAAW,aAAY/C,UACzD/C,EAAAA,EAAAA,KAAA,MACI8C,UAAW6C,EAAQ5C,UAGnBF,EAAAA,EAAAA,MAAA,UACIkD,IAAKC,GAAQN,EAAarB,EAAU,WAAY2B,GAAQ,KACxD/C,QAASA,IAAMC,EAAeI,GAC9B2C,UAAW9D,GAAiB,eAAXA,EAAE+D,MAAyBR,EAAcpB,EAAU,YAAc,KAAKvB,SAAA,EAEvF/C,EAAAA,EAAAA,KAAA,OAAKmD,IAAKM,EAAWJ,IAAKE,KAC1BvD,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,aAAYC,SAAEQ,QAR5BD,IAHOA,EAcJ,IAGxB,OACItD,EAAAA,EAAAA,KAAA,MAAI8C,UAAU,aAAYC,UACtB/C,EAAAA,EAAAA,KAACmG,EAAAA,EAAe,CAACC,UAAW,KAAKrD,SAC5ByC,KAEJ,EAoBJa,CAAS3B,GAhBM9E,KACpB,OAAQA,GACJ,IAAK,YACD,OAAO,KACX,IAAK,WACD,OAAQI,EAAAA,EAAAA,KAAA,QAAM8C,UAAU,sBAAqBC,SAAC,gEAClD,QACI,OAAOpD,EAAAA,EAAAA,GAAWC,GAC1B,EASK0G,CAAe1G,GACC,aAAfA,GAA4C,YAAfA,GAA4BgF,EAASJ,EAAc,EAAK,MACnFxE,EAAAA,EAAAA,KAAA,UACI8C,UAAWuC,EACXpC,QAAS6B,EACTyB,MAAOjB,EAAYvC,UAEnB/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,kBAG7B,E,cC5Fd,MAiBA,EAjBiByD,KAET3D,EAAAA,EAAAA,MAAA4D,EAAAA,SAAA,CAAA1D,SAAA,EACI/C,EAAAA,EAAAA,KAAA,KAAG8C,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnC/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,4BACf9C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,6BAEnB9C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,2BACf9C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,2BACf9C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,gCCmCzBE,EAAO0D,IAAe,IAAd,KAAE5G,GAAM4G,EAClB,MAAM,KAAEpG,EAAI,UAAEqG,EAAS,UAAEtC,EAAS,UAAEC,GAAcxE,GAC5C,GAAEwD,EAAE,KAAEC,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAEiD,GAAWtG,EAC/DuG,EAAYtF,KAAKE,IAAImF,EAAO/E,OAAQ8E,GAG1C,OAFAC,EAAO/E,OAASgF,GAGZhE,EAAAA,EAAAA,MAAA4D,EAAAA,SAAA,CAAA1D,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzB/C,EAAAA,EAAAA,KAAA,OAAKmD,IAAKM,EAAWJ,IAAKE,KAC1BV,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACI/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,kBAAiBC,SAAEQ,KAClCV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvB/C,EAAAA,EAAAA,KAAA,KAAGmE,KAAMT,EACLqC,IAAKC,GAAQ3B,EAAU,WAAY2B,GACnClD,UAAU,sBACVmD,UAAW9D,GAAiB,cAAXA,EAAE+D,KAAwB5B,EAAU,YAAc,KAAKvB,UAExE/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,gBAE3B/C,EAAAA,EAAAA,KAAA,KAAGmE,KAAMR,EACLb,UAAU,sBACVmD,UAAW9D,GAAiB,cAAXA,EAAE+D,KAAwB5B,EAAU,YAAc,KAAKvB,UAExE/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,mBAhBJO,IAqBnCtD,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,cAAaC,SACvBS,KAELxD,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,eAAcC,SAAC,aAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5B8D,EAAY,EAAI,KAAO,yCAEpBD,EAAOnB,KAAI,CAACqB,EAAMC,KACd,MAAMzD,EAAKwD,EAAKE,YAAY9C,MAAM,QAAQ,GAE1C,OACIlE,EAAAA,EAAAA,KAAA,MAAI8C,UAAU,oBACVmD,UAAW9D,GAAiB,cAAXA,EAAE+D,KAAwB5B,EAAU,YAAc,KAAKvB,UAExE/C,EAAAA,EAAAA,KAACiH,EAAAA,GAAI,CAACC,GAAI,+BAA+B5D,IAAKP,SACzC+D,EAAKvD,QAJyBwD,EAMlC,SAOtB,EAWX,EAtGiBhG,IAAuD,IAAtD,OAAEqD,EAAM,UAAEC,EAAS,UAAEC,EAAS,UAAEqC,EAAY,IAAI5F,EAC9D,MAAOT,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAE3B,WAAEZ,EAAU,cAAEuB,EAAa,aAAEgG,IAAiBvG,EAAAA,EAAAA,MAEpD0B,EAAAA,EAAAA,YAAU,IAAM8E,KACZ,CAAChD,IAEL,MAAMgD,EAAaA,KACVhD,GAEL+C,EAAa/C,GACRnC,KAAKoF,EAAa,EAGrBA,EAAgB/G,IAClBC,EAAQD,GAERa,EAAcb,EAAO,YAAc,QAAQ,EAa/C,OACIN,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,aAAYC,SAXPnD,IAGX,YADDA,GAEOI,EAAAA,EAAAA,KAACwG,EAAQ,KAET7G,EAAAA,EAAAA,GAAWC,EAAYoD,EAAM,CAAE1C,OAAMqG,YAAWtC,YAAWC,cAMrEgC,CAAe1G,IACd,E,uBClCd,MAgFA,EAhFuB0H,KACnB,MAAOhH,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,WAAEZ,EAAU,cAAEuB,EAAa,mBAAEoG,IAAuB3G,EAAAA,EAAAA,KAEpDyG,EAAgB/G,IAClBC,EAAQD,GAERa,EAAcb,EAAKuB,OAAS,EAAI,YAAc,WAAW,EAiCvDe,EAAW,WAA0B,cAAfhD,GACN,YAAfA,GAA4BA,EAAW4H,SAAS,SAAY,oBAAsB,gBAEzF,OACI3E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9B/C,EAAAA,EAAAA,KAACyH,EAAAA,GAAM,CACHC,cAAe,CACXC,SAAU,IAEdC,iBAAkBC,EAAAA,GAAW,CACzBF,SAAUE,EAAAA,KAAaC,SAAS,4BAEpCC,SAAUhH,IAAmB,IAAlB,SAAE4G,GAAU5G,EAzC/BwG,EA0CuBI,GAzClB1F,KAAKoF,EAyCsB,EACtBtE,UAEFF,EAAAA,EAAAA,MAACmF,EAAAA,GAAI,CAAAjF,SAAA,EACD/C,EAAAA,EAAAA,KAAA,SAAO8C,UAAU,qBAAqBmF,QAAQ,WAAUlF,SAAC,kCACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjC/C,EAAAA,EAAAA,KAACkI,EAAAA,GAAK,CACF5E,GAAG,WACHC,KAAK,WACL4E,KAAK,OACLC,YAAY,aACZC,QAASlG,GAAKhB,EAAc,cAEhCnB,EAAAA,EAAAA,KAAA,UACImI,KAAK,SACLrF,UAAWF,EAASG,UACpB/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,eAG/B/C,EAAAA,EAAAA,KAACsI,EAAAA,GAAkB,CAAClC,UAAU,MAAMtD,UAAU,qBAAqBS,KAAK,kBAzDhE3D,KAEpB,OAAQA,GACJ,IAAK,UACD,OAAO,KACX,IAAK,WACD,OACII,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,qBAAoBC,SAAC,8DAI5C,IAAK,YACD,OACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAC,mBAAiBzC,EAAK,GAAGiD,KAAK,aACpEvD,EAAAA,EAAAA,KAACiH,EAAAA,GAAI,CAACC,GAAI,mCAAmC5G,EAAK,GAAGgD,KAAMR,UAAU,sBAAqBC,UACtF/C,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,QAAOC,SAAC,iBAIvC,QACI,OAAOpD,EAAAA,EAAAA,GAAWC,GAC1B,EAsCK0G,CAAe1G,KACd,E,cCnFd,MAAM2I,UAAsB1I,EAAAA,UAAU2I,WAAAA,GAAA,SAAAC,WAAA,KAClCC,MAAQ,CACJC,OAAO,EACV,CAED,+BAAOC,CAAyBD,GAE5B,MAAO,CAAEA,OAAO,EACpB,CAEAE,iBAAAA,CAAkBF,EAAOG,GACrB,CAGJC,MAAAA,GACI,OAAIC,KAAKN,MAAMC,MACPK,KAAKC,MAAMC,SAAiBF,KAAKC,MAAMC,UAC/BlJ,EAAAA,EAAAA,KAACE,EAAAA,EAAY,IAEtB8I,KAAKC,MAAMlG,QACtB,EAGJ,U,qDCwCA,EAtDiBoG,KACb,MAAOC,EAAcC,IAAmB7I,EAAAA,EAAAA,UAAS,GAE3C8I,GAAOjI,EAAAA,EAAAA,QAAO,CAAC,GAMfgD,EAAYA,CAACkF,EAASC,KACxBF,EAAKC,GAAWC,CAAI,EAGlBlF,EAAaiF,IACXD,EAAKC,IAAUD,EAAKC,GAASE,OAAO,EAG5C,OACI5G,EAAAA,EAAAA,MAAA4D,EAAAA,SAAA,CAAA1D,SAAA,EACIF,EAAAA,EAAAA,MAAC6G,EAAAA,EAAM,CAAA3G,SAAA,EACH/C,EAAAA,EAAAA,KAAA,QACIuD,KAAK,cACLoG,QAAQ,+BAEZ3J,EAAAA,EAAAA,KAAA,SAAA+C,SAAO,kCAEX/C,EAAAA,EAAAA,KAACuI,EAAa,CAAAxF,UACV/C,EAAAA,EAAAA,KAACI,EAAU,OAEfyC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1B/C,EAAAA,EAAAA,KAACuI,EAAa,CAAAxF,UACV/C,EAAAA,EAAAA,KAAC4J,EAAQ,CACLvF,UAAWA,EAAWC,UAAWA,EACjCpB,eA5BII,IACpB+F,EAAgB/F,EAAG,EA4BHc,OAAQgF,OAGhBvG,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACI/C,EAAAA,EAAAA,KAACuI,EAAa,CAAAxF,UACV/C,EAAAA,EAAAA,KAAC6J,EAAQ,CACLxF,UAAWA,EAAWC,UAAWA,EACjCF,OAAQgF,OAGhBpJ,EAAAA,EAAAA,KAACuI,EAAa,CAAAxF,UACV/C,EAAAA,EAAAA,KAACsH,EAAc,OAEnBtH,EAAAA,EAAAA,KAAA,OAAK8C,UAAU,gBAAgBK,IAAK2G,EAAYzG,IAAI,mBAG7D,C,uHC3DX,MAAM0G,EAAWC,EAAAA,GAAOC,GAAG;;;;;;EAc3B,EANqB/J,KAEbF,EAAAA,EAAAA,KAAC+J,EAAQ,CAAC5G,IAAK+G,EAAU7G,IAAI,S,gDCX9B,M,kICGMzC,EAAmBA,KAC5B,MAAM,QAAEuJ,EAAO,WAAEvK,EAAU,cAAEuB,GDJViJ,MACnB,MAAOxK,EAAYuB,IAAiBX,EAAAA,EAAAA,UAAS,WAmC7C,MAAO,CAAE2J,SAjCOE,EAAAA,EAAAA,cACZC,eAAOC,GAMI,IALPC,EAAM/B,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAG,MACTiC,EAAIjC,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAG,KACPkC,EAAOlC,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAG,CACN,eAAgB,mBAChB,kBAAmB,mBAGvBtH,EAAc,WAEd,IACI,MAAMyJ,QAAiBC,MAAMN,EAAK,CAAEC,SAAQE,OAAMC,YAElD,IAAKC,EAASE,GACV,MAAM,IAAI3K,MAAM,mBAAmBoK,cAAgBK,EAASG,UAOhE,aAJmBH,EAASI,MAMhC,CAAE,MAAO7I,GACL,MAAM8I,EAAY9I,EAAE+I,QAAQ1D,SAAS,WAAarF,EAAE+I,QAAQhH,MAAM,yBAAyB,GAAK,MAIhG,MAFA/C,EAAc,QAAU8J,GAElB,IAAI9K,MAAMgC,EACpB,CACJ,GAAG,IAEWvC,aAAYuB,gBAAe,EChCEiJ,GAEzCe,EAAW,4CACXC,EAAU,0CAEV5G,EAAc,KACdC,EAAyB,IAGzBF,EAAmB+F,iBAAuD,IAAhD1F,EAAM6D,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAGhE,EAAwBpC,EAAKoG,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAG,EACrE,GAAI7D,EAASJ,KAAiB,MAAO,GAErC,IAEI,aADkB2F,EAAQ,GAAGgB,qBAA4B9I,YAAgBuC,KAAUwG,MACxEtL,KAAKuL,QAAQ5F,IAAI6F,EAChC,CAAE,MAAOnJ,GACL,MAAO,EACX,CACJ,EAiDMmJ,EAAuBhL,IACzB,MAAM,GAAEgD,EAAE,KAAEC,EAAI,YAAEC,EAAW,UAAEC,EAAS,KAAE8H,GAASjL,EAMnD,MAAO,CACHgD,KACAC,OACAC,YAAaA,EACbC,UARiBA,EAAU+H,KAAKhE,SAAS,uBAAyBiE,EAChEhI,EAAU+H,KAAKhE,SAAS,iBAAmBkE,EACvC,GAAGjI,EAAU+H,QAAQ/H,EAAUkI,YAOrCjI,SAAU6H,EAAK,GAAGhB,IAClB5G,KAAM4H,EAAK,GAAGhB,IACd3D,OAAQtG,EAAKsG,OAAOgF,MACvB,EAGCC,EAAoBjF,IAAY,IAADkF,EACjC,MAAM,GAAExI,EAAE,MAAEyI,EAAK,YAAEvI,EAAW,UAAEwI,EAAS,UAAEvI,EAAS,OAAEwI,GAAWrF,EAEjE,MAAO,CACHtD,KACAyI,QACAvI,YAAaA,GAAe,6BAC5BwI,UAAWA,EACL,GAAGA,OACH,2CACNvI,UAAW,GAAGA,EAAU+H,QAAQ/H,EAAUkI,YAC1CO,UAA+B,QAArBJ,EAAAlF,EAAOuF,YAAY,UAAE,IAAAL,OAAA,EAArBA,EAAuBI,WAAY,QAC7CE,MAAOH,EAAO,GAAGG,MACX,GAAGH,EAAO,GAAGG,UACb,gBACT,EAGL,MAAO,CACH5H,cAAa6H,aAjGI,IAiGU5H,yBAC3B7E,aAAYuB,gBACZgG,aA3EiBmD,UACjB,IACI,MAAMgC,QAAYnC,EAAQ,GAAGgB,eAAsB7H,KAAM8H,MACzD,OAAOkB,EAAMhB,EAAoBgB,EAAIxM,KAAKuL,QAAQ,IAAM,IAC5D,CAAE,MAAOlJ,GACL,OAAO,IACX,GAqEcoF,mBAlES+C,UACvB,IAEI,aADkBH,EAAQ,GAAGgB,oBAA2B5H,KAAQ6H,MACrDtL,KAAKuL,QAAQ5F,IAAI6F,EAChC,CAAE,MAAOnJ,GACL,MAAO,EACX,GA4DkCoC,mBAAkB5D,oBAtF5B2J,UACxB,MAAMiC,EAAehL,KAAKiL,MAAmB,KAAbjL,KAAKkL,SAAyDhI,GAE9F,IAEI,aADkBF,EAAiBgI,EAAclK,EAErD,CAAE,MAAOF,GACL,MAAO,EACX,GA+EAuK,aA1DiBpC,iBAAkC,IAA3B1F,EAAM6D,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAG,EAAGpG,EAAKoG,UAAA5G,OAAA,QAAA4I,IAAAhC,UAAA,GAAAA,UAAA,GAAG,EAC5C,IAEI,aADkB0B,EAAQ,GAAGgB,qCAA4C9I,YAAgBuC,KAAUwG,MACxFtL,KAAKuL,QAAQ5F,IAAIoG,EAChC,CAAE,MAAO1J,GACL,MAAO,EACX,CACJ,EAmDkBwK,SAjDDrC,UACb,IACI,MAAMgC,QAAYnC,EAAQ,GAAGgB,WAAkB7H,KAAM8H,KACrD,OAAOkB,EAAMT,EAAiBS,EAAIxM,KAAKuL,QAAQ,IAAM,EACzD,CAAE,MAAOlJ,GACL,MAAO,EACX,GA4CH,C","sources":["utils/setContent.js","components/randomChar/RandomChar.js","services/MarvelBuffering.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import Spinner from \"../components/spinner/Spinner\"\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (processing, Component, data) => {\r\n\r\n    switch (processing.replace(/\\d/g, '')) {\r\n        case 'waiting':\r\n            return <Spinner />\r\n        case 'loading':\r\n            return <Spinner />\r\n        case 'confirmed':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent","import { useState, useEffect, memo } from 'react';\r\n\r\nimport setContent from '../../utils/setContent';\r\nimport { useBuffering } from \"../../services/MarvelBuffering\";\r\nimport { useMarvelService } from '../../services/MarvelService';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\n\r\nconst RandomChar = memo(() => {\r\n    const [char, setChar] = useState(null)\r\n    const [selected, setSelected] = useState(true)\r\n\r\n    const { getRandomCharacters } = useMarvelService()\r\n\r\n    const { processing, getBuffer, updateBuffer } = useBuffering({\r\n        qtyMin: 3,\r\n        qtyLimit: 10,\r\n        getData: (limit) => getRandomCharacters(limit)\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateBuffer()\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [])\r\n\r\n    useEffect(() => {\r\n        if (!selected) onCharRender()\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [selected])\r\n\r\n    useEffect(() => {\r\n        const timerId = setInterval(() => {\r\n            if (!selected || processing === 'waiting') onCharRender()\r\n        }, 4000)\r\n        return () => clearInterval(timerId)\r\n    })\r\n\r\n    const onCharRender = () => {\r\n        setChar(getBuffer())\r\n        updateBuffer()\r\n    }\r\n\r\n    const onCharSelected = () => {\r\n        setSelected(selected => !selected)\r\n    }\r\n\r\n    const btnText = selected ? 'Show others' : 'I choose'\r\n    const btnClass = `button ${(processing === 'waiting') ? 'button__secondary' : 'button__main'}`\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(processing, View, { char, selected })}\r\n\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className={btnClass} onClick={onCharSelected}>\r\n                    <div className=\"inner\" >{btnText}</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst sliceText = (text, maxLen) => {\r\n    let str = text.trim().replace(/\\s+/g, \" \") || 'no information available'\r\n\r\n    if (str.length > maxLen) str = str.slice(0, maxLen - 3).match(/.+(?=\\s)/g) + \"...\"\r\n    return str\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { char, selected } = data\r\n    const { id, name, description, thumbnail, homepage, wiki } = char\r\n    const btnClass = `button ${selected ? 'button__main' : 'button__secondary'}`\r\n    const descriptionShort = sliceText(description, 210)\r\n\r\n    return (\r\n        <div className=\"randomchar__block\" key={id}>\r\n            <img src={thumbnail} alt={name} className=\"randomchar__img\" />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{descriptionShort}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className={btnClass}>\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className={btnClass}>\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default RandomChar;","import { useState, useRef } from \"react\"\r\n\r\nexport const useBuffering = ({\r\n    qtyMin = 3,\r\n    qtyLimit = 10,\r\n    getData }) => {\r\n\r\n    const [processing, setProcessing] = useState('waiting')\r\n\r\n    const list = useRef([])\r\n    const qtyExpected = useRef(0)\r\n\r\n    qtyMin = Math.max(1, qtyMin)\r\n    qtyLimit = Math.min(100, Math.max(1, qtyLimit))\r\n\r\n    const setBuffer = (elements) => {\r\n        list.current = elements.length ? list.current.concat(elements) : [null]\r\n        qtyExpected.current -= qtyLimit\r\n    }\r\n\r\n    const getBuffer = () => {\r\n        const bufferLength = list.current.length\r\n        const char = bufferLength ? list.current[bufferLength - 1] : null\r\n\r\n        if (char) {\r\n            setProcessing('confirmed')\r\n        } else {\r\n            setProcessing(bufferLength ? 'error' : 'waiting')\r\n        }\r\n        if (bufferLength) list.current = list.current.slice(0, bufferLength - 1)\r\n\r\n        return char\r\n    }\r\n\r\n    const updateBuffer = () => {\r\n        if (!getData) {\r\n            setBuffer([])\r\n            return\r\n        }\r\n\r\n        if ((list.current.length + qtyExpected.current) < qtyMin) {\r\n\r\n            qtyExpected.current += qtyLimit\r\n\r\n            getData(qtyLimit)\r\n                .then((data) => setBuffer(data))\r\n                .catch((e) => setBuffer([]))\r\n        }\r\n    }\r\n\r\n    return { processing, getBuffer, updateBuffer }\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nimport { useMarvelService } from \"../../services/MarvelService\";\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charList.scss';\r\n\r\n\r\nconst CharList = ({ charId, onCharSelected, setRefApp, onFocusTo }) => {\r\n    const { processing, setProcessing, getAllCharacters, charsMarvel, offsetCharsBeginMarvel } = useMarvelService()\r\n\r\n    const [chars, setChars] = useState([])\r\n    const [offset, setOffset] = useState(offsetCharsBeginMarvel)\r\n\r\n    useEffect(() => {\r\n        onRequest()\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [])\r\n\r\n    const onRequest = () => {\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = newChars => {\r\n        setChars(chars => [...chars,\r\n        ...newChars.filter(obj1 => chars.findIndex(obj2 => (obj2.id === obj1.id)) < 0)])\r\n        setOffset(offset + 9)\r\n\r\n        setProcessing('confirmed')\r\n    }\r\n\r\n    const viewList = (chars) => {\r\n        const cardsChars = chars.map(char => {\r\n            const { id, name, thumbnail } = char\r\n            const idSelected = id === charId\r\n            const classLi = `char__item ${idSelected ? 'char__item_selected' : ''}`\r\n\r\n            return (\r\n                <CSSTransition key={id} timeout={300} classNames=\"char__item\">\r\n                    <li\r\n                        className={classLi}\r\n                        key={id}\r\n                    >\r\n                        <button\r\n                            ref={link => idSelected ? setRefApp('CharList', link) : null}\r\n                            onClick={() => onCharSelected(id)}\r\n                            onKeyDown={e => (e.code === 'ArrowRight' && idSelected) ? onFocusTo('CharInfo') : null}\r\n                        >\r\n                            <img src={thumbnail} alt={name} />\r\n                            <div className=\"char__name\">{name}</div>\r\n                        </button>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {cardsChars}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const setContentCust = (processing) => {\r\n        switch (processing) {\r\n            case 'confirmed':\r\n                return null\r\n            case 'error429':\r\n                return (<span className=\"char__error_message\">You have exceeded your rate limit.  Please try again later.</span>)\r\n            default:\r\n                return setContent(processing)\r\n        }\r\n    }\r\n\r\n    const classButton = `button ${processing === 'loading' ? 'button__secondary' : 'button__main'} button__long`\r\n    const styleButton = processing === 'loading' ? { width: 'unset' } : {}\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {viewList(chars)}\r\n            {setContentCust(processing)}\r\n            {(processing === 'error429' || processing === 'loading' || offset > charsMarvel - 1) ? null : (\r\n                <button\r\n                    className={classButton}\r\n                    onClick={onRequest}\r\n                    style={styleButton}\r\n                >\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired,\r\n    setRefApp: PropTypes.func.isRequired,\r\n    onFocusTo: PropTypes.func.isRequired,\r\n    charId: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\"\r\nimport PropTypes from 'prop-types';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport { useMarvelService } from \"../../services/MarvelService\";\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = ({ charId, setRefApp, onFocusTo, comicsMax = 10 }) => {\r\n    const [char, setChar] = useState(0)\r\n\r\n    const { processing, setProcessing, getCharacter } = useMarvelService()\r\n\r\n    useEffect(() => updateChar(), // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [charId])\r\n\r\n    const updateChar = () => {\r\n        if (!charId) return\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n\r\n        setProcessing(char ? 'confirmed' : 'error')\r\n    }\r\n\r\n    const setContentCust = (processing) => {\r\n\r\n        switch (processing) {\r\n            case 'waiting':\r\n                return <Skeleton />\r\n            default:\r\n                return setContent(processing, View, { char, comicsMax, setRefApp, onFocusTo })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContentCust(processing)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { char, comicsMax, setRefApp, onFocusTo } = data\r\n    const { id, name, description, thumbnail, homepage, wiki, comics } = char\r\n    const qtyComics = Math.min(comics.length, comicsMax)\r\n    comics.length = qtyComics\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\" key={id}>\r\n                <img src={thumbnail} alt={name} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage}\r\n                            ref={link => setRefApp('CharInfo', link)}\r\n                            className=\"button button__main\"\r\n                            onKeyDown={e => (e.code === 'ArrowLeft') ? onFocusTo('CharList') : null}\r\n                        >\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki}\r\n                            className=\"button button__main\"\r\n                            onKeyDown={e => (e.code === 'ArrowLeft') ? onFocusTo('CharList') : null}\r\n                        >\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {qtyComics > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        const id = item.resourceURI.match(/\\d+$/)[0]\r\n\r\n                        return (\r\n                            <li className=\"char__comics-item\" key={i}\r\n                                onKeyDown={e => (e.code === 'ArrowLeft') ? onFocusTo('CharList') : null}\r\n                            >\r\n                                <Link to={`/reactGLO2025_Marvel/comics/${id}`}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </li>\r\n\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number.isRequired,\r\n    setRefApp: PropTypes.func.isRequired,\r\n    onFocusTo: PropTypes.func.isRequired,\r\n    comicsMax: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useMarvelService } from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { processing, setProcessing, getCharacterByName } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n\r\n        setProcessing(char.length > 0 ? 'confirmed' : 'notfound')\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const setContentCust = (processing) => {\r\n\r\n        switch (processing) {\r\n            case 'waiting':\r\n                return null\r\n            case 'notfound':\r\n                return (\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>\r\n                )\r\n            case 'confirmed':\r\n                return (\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/reactGLO2025_Marvel/characters/${char[0].id}`} className=\"button button__main\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n            default:\r\n                return setContent(processing)\r\n        }\r\n    }\r\n\r\n    const btnClass = `button ${(processing === 'confirmed'\r\n        || processing === 'loading' || processing.includes('error')) ? 'button__secondary' : 'button__main'}`\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"\r\n                            onInput={e => setProcessing('waiting')}\r\n                        />\r\n                        <button\r\n                            type='submit'\r\n                            className={btnClass}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {setContentCust(processing)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Обновите состояние, чтобы при следующем рендеринге был показан резервный пользовательский интерфейс.\r\n        return { error: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // формируйте логи об ошибках здесь\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            if (this.props.fallback) return this.props.fallback\r\n            else return <ErrorMessage />\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import { useState, useRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(0)\r\n\r\n    const refs = useRef({})\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n\r\n    const setRefApp = (nameRef, elem) => {\r\n        refs[nameRef] = elem\r\n    }\r\n\r\n    const onFocusTo = (nameRef) => {\r\n        if (refs[nameRef]) refs[nameRef].focus()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList\r\n                        setRefApp={setRefApp} onFocusTo={onFocusTo}\r\n                        onCharSelected={onCharSelected}\r\n                        charId={selectedChar}\r\n                    />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo\r\n                            setRefApp={setRefApp} onFocusTo={onFocusTo}\r\n                            charId={selectedChar}\r\n                        />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import styled from 'styled-components';\r\nimport imgError from \"./error.gif\"\r\n\r\nconst ErrorImg = styled.img`\r\n  display: block;\r\n  width: 250px;\r\n  height: 250px;\r\n  object-fit: contain;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <ErrorImg src={imgError} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [processing, setProcessing] = useState('waiting')\r\n\r\n    const request = useCallback(\r\n        async (url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = {\r\n                'Content-Type': 'application/json',\r\n                'Accept-Language': 'en-US, en;q=0.9'\r\n            }) => {\r\n\r\n            setProcessing('loading')\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers })\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n                }\r\n\r\n                const data = await response.json()\r\n\r\n                //setProcessing('confirmed') -  устанавливаем \"вручную\" после обработки data в цепочке обработки then\r\n\r\n                return data\r\n\r\n            } catch (e) {\r\n                const codeError = e.message.includes('status:') ? e.message.match(/(?<=status:\\s*)\\d{3}/g)[0] : '000'\r\n\r\n                setProcessing('error' + codeError)\r\n\r\n                throw new Error(e);\r\n            }\r\n        }, [])\r\n\r\n    return { request, processing, setProcessing }\r\n}\r\n","import { useHttp } from '../hooks/http.hook'\r\n\r\nimport imgNotFound from \"../resources/img/image_not_found.webp\"\r\nimport imgNotAvailbale from \"../resources/img/image_not_available.webp\"\r\n\r\nexport const useMarvelService = () => {\r\n    const { request, processing, setProcessing } = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = `apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n\r\n    const charsMarvel = 1564 // на 16.02.2025\r\n    const offsetCharsBeginMarvel = 196\r\n    const comicsMarvel = 1000 // ???\r\n\r\n    const getAllCharacters = async (offset = offsetCharsBeginMarvel, limit = 9) => {\r\n        if (offset > charsMarvel - 1) return []\r\n\r\n        try {\r\n            const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`)\r\n            return res.data.results.map(_transformCharacter)\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getRandomCharacters = async (limit) => {\r\n        const randomOffset = Math.floor(Math.random() * (charsMarvel - 10 - offsetCharsBeginMarvel) + offsetCharsBeginMarvel)\r\n\r\n        try {\r\n            const res = await getAllCharacters(randomOffset, limit)\r\n            return res\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        try {\r\n            const res = await request(`${_apiBase}characters/${id}?${_apiKey} `)\r\n            return res ? _transformCharacter(res.data.results[0]) : null\r\n        } catch (e) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        try {\r\n            const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n            return res.data.results.map(_transformCharacter);\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = 0, limit = 8) => {\r\n        try {\r\n            const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`)\r\n            return res.data.results.map(_transformComics)\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        try {\r\n            const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n            return res ? _transformComics(res.data.results[0]) : []\r\n        } catch (e) {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        const { id, name, description, thumbnail, urls } = char\r\n\r\n        const srcThumbnail = thumbnail.path.includes('image_not_available') ? imgNotFound\r\n            : thumbnail.path.includes('4c002e0305708') ? imgNotAvailbale\r\n                : `${thumbnail.path}.${thumbnail.extension}`\r\n\r\n        return {\r\n            id,\r\n            name,\r\n            description: description,\r\n            thumbnail: srcThumbnail,\r\n            homepage: urls[0].url,\r\n            wiki: urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        const { id, title, description, pageCount, thumbnail, prices } = comics\r\n\r\n        return {\r\n            id,\r\n            title,\r\n            description: description || \"The description is missing\",\r\n            pageCount: pageCount\r\n                ? `${pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: `${thumbnail.path}.${thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: prices[0].price\r\n                ? `${prices[0].price} $`\r\n                : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        charsMarvel, comicsMarvel, offsetCharsBeginMarvel,\r\n        processing, setProcessing,\r\n        getCharacter, getCharacterByName, getAllCharacters, getRandomCharacters,\r\n        getAllComics, getComic\r\n    }\r\n}\r\n"],"names":["setContent","processing","Component","data","replace","_jsx","Spinner","ErrorMessage","Error","RandomChar","memo","char","setChar","useState","selected","setSelected","getRandomCharacters","useMarvelService","getBuffer","updateBuffer","_ref","qtyMin","qtyLimit","getData","setProcessing","list","useRef","qtyExpected","Math","max","min","setBuffer","elements","current","length","concat","bufferLength","slice","then","catch","e","useBuffering","limit","useEffect","onCharRender","timerId","setInterval","clearInterval","btnText","btnClass","_jsxs","className","children","View","onClick","onCharSelected","src","mjolnir","alt","id","name","description","thumbnail","homepage","wiki","descriptionShort","sliceText","text","maxLen","str","trim","match","href","charId","setRefApp","onFocusTo","getAllCharacters","charsMarvel","offsetCharsBeginMarvel","chars","setChars","offset","setOffset","onRequest","onCharListLoaded","newChars","filter","obj1","findIndex","obj2","classButton","styleButton","width","cardsChars","map","idSelected","classLi","CSSTransition","timeout","classNames","ref","link","onKeyDown","code","TransitionGroup","component","viewList","setContentCust","style","Skeleton","_Fragment","_ref2","comicsMax","comics","qtyComics","item","i","resourceURI","Link","to","getCharacter","updateChar","onCharLoaded","CharSearchForm","getCharacterByName","includes","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","onInput","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","getDerivedStateFromError","componentDidCatch","errorInfo","render","this","props","fallback","MainPage","selectedChar","setSelectedChar","refs","nameRef","elem","focus","Helmet","content","CharList","CharInfo","decoration","ErrorImg","styled","img","imgError","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","codeError","message","_apiBase","_apiKey","results","_transformCharacter","urls","path","imgNotFound","imgNotAvailbale","extension","items","_transformComics","_comics$textObjects$","title","pageCount","prices","language","textObjects","price","comicsMarvel","res","randomOffset","floor","random","getAllComics","getComic"],"sourceRoot":""}